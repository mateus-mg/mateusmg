/**
 * Script principal de build para o portf√≥lio de Mateus Galv√£o
 * Executa extra√ß√£o de tradu√ß√µes e minifica√ß√£o de arquivos CSS e JavaScript para produ√ß√£o
 */

const fs = require('fs-extra');
const path = require('path');
const { exec, execSync } = require('child_process');
const { extractTranslations } = require('./extract-translations');

// Caminhos importantes
const ROOT_DIR = path.resolve(__dirname, '../');
const DIST_DIR = path.join(ROOT_DIR, 'dist');

console.log('üöÄ Iniciando build do portf√≥lio para produ√ß√£o...');

// Criar diret√≥rio de distribui√ß√£o se n√£o existir
fs.ensureDirSync(DIST_DIR);

// Limpar diret√≥rio dist
console.log('üßπ Limpando diret√≥rio de distribui√ß√£o...');
fs.emptyDirSync(DIST_DIR);

// Copiar arquivos de forma seletiva em vez de copiar tudo
console.log('üìÇ Copiando arquivos...');

// Lista de diret√≥rios para copiar
const dirsToCopy = [
    { src: path.join(ROOT_DIR, 'css'), dest: path.join(DIST_DIR, 'css') },
    { src: path.join(ROOT_DIR, 'js'), dest: path.join(DIST_DIR, 'js') },
    { src: path.join(ROOT_DIR, 'img'), dest: path.join(DIST_DIR, 'img') },
    { src: path.join(ROOT_DIR, 'fonts'), dest: path.join(DIST_DIR, 'fonts') },
    { src: path.join(ROOT_DIR, 'i18n'), dest: path.join(DIST_DIR, 'i18n') },
    { src: path.join(ROOT_DIR, 'pdf'), dest: path.join(DIST_DIR, 'pdf') }
];

// Copiar diret√≥rios
dirsToCopy.forEach(dir => {
    if (fs.existsSync(dir.src)) {
        fs.copySync(dir.src, dir.dest);
        console.log(`‚úÖ Copiado: ${path.relative(ROOT_DIR, dir.src)} ‚Üí ${path.relative(ROOT_DIR, dir.dest)}`);
    }
});

// Lista de arquivos para copiar na raiz
const filesToCopy = [
    'index.html',
    'projeto.html',
    '404.html',
    '500.html',
    '_headers',
    '_routes.json',
    'cloudflare-pages.json',
    'LICENSE'
];

// Copiar arquivos individuais
filesToCopy.forEach(file => {
    const srcFile = path.join(ROOT_DIR, file);
    const destFile = path.join(DIST_DIR, file);

    if (fs.existsSync(srcFile)) {
        fs.copySync(srcFile, destFile);
        console.log(`‚úÖ Copiado: ${file}`);
    }
});

// Primeiro executar a extra√ß√£o de tradu√ß√µes, depois minificar
console.log('üîç Extraindo tradu√ß√µes...');

// Fun√ß√£o para executar o processo de build com async/await
async function executarBuild() {
    try {        // Extrair tradu√ß√µes (primeiro passo)
        console.log('‚è±Ô∏è In√≠cio da extra√ß√£o de tradu√ß√µes: ' + new Date().toTimeString());
        await extractTranslations();
        console.log('‚è±Ô∏è Fim da extra√ß√£o de tradu√ß√µes: ' + new Date().toTimeString());

        // Copiar os arquivos atualizados de tradu√ß√£o para o diret√≥rio dist
        fs.copySync(path.join(ROOT_DIR, 'i18n'), path.join(DIST_DIR, 'i18n'));
        console.log('‚úÖ Arquivos de tradu√ß√£o atualizados copiados para dist/i18n');

        // Executar a minifica√ß√£o CSS
        console.log('üîß Minificando arquivos CSS...');
        const resultCSS = execSync('node build-tools/minify-css.js', { encoding: 'utf-8' });
        console.log(resultCSS);

        // Executar a minifica√ß√£o JavaScript
        console.log('üîß Minificando arquivos JavaScript...');
        const resultJS = execSync('node build-tools/minify-js.js', { encoding: 'utf-8' });
        console.log(resultJS);

        console.log('‚úÖ Build conclu√≠do com sucesso! Os arquivos est√£o na pasta dist/');
    } catch (error) {
        console.error(`‚ùå Erro no processo de build: ${error}`);
        process.exit(1);
    }
}

// Iniciar o processo de build
executarBuild();