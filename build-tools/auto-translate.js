/**
 * Script para tradu√ß√£o autom√°tica dos textos do arquivo pt.json para en.json e es.json
 * Utiliza um mecanismo local de tradu√ß√£o baseado em regras e dicion√°rios sem depend√™ncia
 * de APIs externas para manter a independ√™ncia
 */

const fs = require('fs-extra');
const path = require('path');

// Conjunto de √≠cones para mensagens de console
const icons = {
    init: 'üöÄ',
    translate: 'üåê',
    dictionary: 'üìö',
    en: 'üá¨üáß',
    es: 'üá™üá∏',
    pt: 'üáßüá∑',
    save: 'üíæ',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    processing: '‚öôÔ∏è',
    time: '‚è±Ô∏è',
    merge: 'üîÑ'
};

// Caminhos importantes
const ROOT_DIR = path.resolve(__dirname, '../');
const I18N_DIR = path.join(ROOT_DIR, 'i18n');
const PT_JSON_PATH = path.join(I18N_DIR, 'pt.json');
const EN_JSON_PATH = path.join(I18N_DIR, 'en.json');
const ES_JSON_PATH = path.join(I18N_DIR, 'es.json');

// Dicion√°rios b√°sicos para tradu√ß√£o
// Nota: Em um projeto real, esses dicion√°rios seriam mais completos e espec√≠ficos para o dom√≠nio
const dicionarioPtEn = {
    // Navega√ß√£o
    'Sobre mim': 'About Me',
    'Experi√™ncias': 'Experience',
    'Portf√≥lio': 'Portfolio',
    'Projetos': 'Projects',
    'Servi√ßos': 'Services',
    'Contato': 'Contact',
    'Voltar': 'Back',

    // Bot√µes comuns
    'Enviar': 'Send',
    'Enviar Mensagem': 'Send Message',
    'Anterior': 'Previous',
    'Pr√≥ximo': 'Next',
    'Ver mais': 'View More',
    'Ver no GitHub': 'View on GitHub',
    'Baixe meu CV': 'Download my CV',
    'Voltar para a P√°gina Inicial': 'Back to Home Page',
    'Voltar ao topo': 'Back to Top',

    // T√≠tulos de se√ß√£o
    'Sobre mim': 'About Me',
    'Experi√™ncia': 'Experience',
    'Forma√ß√£o': 'Education',
    'Habilidades': 'Skills',
    'Contato': 'Contact',
    'Tecnologias': 'Technologies',
    'Descri√ß√£o': 'Description',
    'Relat√≥rio do Projeto': 'Project Report',

    // Formul√°rio de contato
    'Nome': 'Name',
    'Email': 'Email',
    'Assunto': 'Subject',
    'Mensagem': 'Message',
    'Telefone': 'Phone',
    'Or√ßamento': 'Budget',
    'Parceria': 'Partnership',
    'Proposta de Emprego': 'Job Opportunity',
    'Outro': 'Other',
    'Selecione um assunto': 'Select a subject',

    // N√≠veis de idioma
    'Nativo': 'Native',
    'Fluente': 'Fluent',
    'Intermedi√°rio': 'Intermediate',
    'B√°sico': 'Basic',
    'Avan√ßado': 'Advanced',

    // Frases comuns
    'Ol√°, seja bem-vindo!': 'Hello, welcome!',
    'Arquiteto de Dados': 'Data Architect',
    'Cientista de Dados': 'Data Scientist',
    'Engenheiro de Dados': 'Data Engineer',
    'Analista de Dados': 'Data Analyst',
};

const dicionarioPtEs = {
    // Navega√ß√£o
    'Sobre mim': 'Sobre m√≠',
    'Experi√™ncias': 'Experiencias',
    'Portf√≥lio': 'Portafolio',
    'Projetos': 'Proyectos',
    'Servi√ßos': 'Servicios',
    'Contato': 'Contacto',
    'Voltar': 'Volver',

    // Bot√µes comuns
    'Enviar': 'Enviar',
    'Enviar Mensagem': 'Enviar Mensaje',
    'Anterior': 'Anterior',
    'Pr√≥ximo': 'Siguiente',
    'Ver mais': 'Ver m√°s',
    'Ver no GitHub': 'Ver en GitHub',
    'Baixe meu CV': 'Descargar mi CV',
    'Voltar para a P√°gina Inicial': 'Volver a la P√°gina Principal',
    'Voltar ao topo': 'Volver arriba',

    // T√≠tulos de se√ß√£o
    'Sobre mim': 'Sobre m√≠',
    'Experi√™ncia': 'Experiencia',
    'Forma√ß√£o': 'Formaci√≥n',
    'Habilidades': 'Habilidades',
    'Contato': 'Contacto',
    'Tecnologias': 'Tecnolog√≠as',
    'Descri√ß√£o': 'Descripci√≥n',
    'Relat√≥rio do Projeto': 'Informe del Proyecto',

    // Formul√°rio de contato
    'Nome': 'Nombre',
    'Email': 'Correo',
    'Assunto': 'Asunto',
    'Mensagem': 'Mensaje',
    'Telefone': 'Tel√©fono',
    'Or√ßamento': 'Presupuesto',
    'Parceria': 'Asociaci√≥n',
    'Proposta de Emprego': 'Oferta de Empleo',
    'Outro': 'Otro',
    'Selecione um assunto': 'Seleccione un asunto',

    // N√≠veis de idioma
    'Nativo': 'Nativo',
    'Fluente': 'Fluido',
    'Intermedi√°rio': 'Intermedio',
    'B√°sico': 'B√°sico',
    'Avan√ßado': 'Avanzado',

    // Frases comuns
    'Ol√°, seja bem-vindo!': '¬°Hola, bienvenido!',
    'Arquiteto de Dados': 'Arquitecto de Datos',
    'Cientista de Dados': 'Cient√≠fico de Datos',
    'Engenheiro de Dados': 'Ingeniero de Datos',
    'Analista de Dados': 'Analista de Datos',
};

// Fun√ß√£o para traduzir textos simples usando dicion√°rios
function traduzirTextoSimples(texto, dicionario) {
    if (!texto || typeof texto !== 'string') {
        return texto;
    }

    // Verificar se h√° uma tradu√ß√£o direta no dicion√°rio
    if (dicionario[texto]) {
        return dicionario[texto];
    }

    // Para textos longos, tentar substituir palavras/frases conhecidas
    let traduzido = texto;

    // Ordenar entradas por comprimento (do mais longo para o mais curto)
    // para evitar substitui√ß√µes parciais inadequadas
    const entradas = Object.entries(dicionario)
        .sort((a, b) => b[0].length - a[0].length);

    for (const [original, traducao] of entradas) {
        // Criar um RegExp para substituir a palavra apenas se for uma palavra completa
        // ou se for parte de uma frase maior
        const regex = new RegExp(`\\b${escapeRegExp(original)}\\b`, 'gi');
        traduzido = traduzido.replace(regex, traducao);
    }

    return traduzido;
}

// Escapar caracteres especiais para uso em RegExp
function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

// Fun√ß√£o para traduzir um objeto JSON recursivamente
function traduzirObjetoJson(obj, dicionario) {
    if (!obj) return {};

    const resultado = {};

    for (const chave in obj) {
        const valor = obj[chave];

        if (typeof valor === 'string') {
            resultado[chave] = traduzirTextoSimples(valor, dicionario);
        } else if (typeof valor === 'object' && valor !== null) {
            resultado[chave] = traduzirObjetoJson(valor, dicionario);
        } else {
            resultado[chave] = valor;
        }
    }

    return resultado;
}

// Fun√ß√£o auxiliar para contar n√∫mero total de chaves em um objeto (incluindo aninhadas)
function contarChaves(obj) {
    if (!obj || typeof obj !== 'object') return 0;

    let count = 0;

    for (const key in obj) {
        count += 1;
        if (typeof obj[key] === 'object' && obj[key] !== null) {
            count += contarChaves(obj[key]);
        }
    }

    return count;
}

// Fun√ß√£o para mesclar dois objetos JSON, preservando valores existentes
function mesclarJsons(existente, novo) {
    const resultado = { ...existente };

    // Fun√ß√£o recursiva para mesclar propriedades
    function mesclarRecursivamente(destino, origem) {
        for (const chave in origem) {
            // Se a chave n√£o existe no destino ou √© uma string vazia, copiar do novo
            if (destino[chave] === undefined ||
                (typeof destino[chave] === 'string' && destino[chave].trim() === '')) {
                destino[chave] = origem[chave];
            }
            // Se ambos s√£o objetos, mesclar recursivamente
            else if (typeof destino[chave] === 'object' &&
                typeof origem[chave] === 'object' &&
                destino[chave] !== null &&
                origem[chave] !== null) {
                mesclarRecursivamente(destino[chave], origem[chave]);
            }
            // Caso contr√°rio, manter o valor existente
        }
    }

    mesclarRecursivamente(resultado, novo);
    return resultado;
}

// Fun√ß√£o principal de auto tradu√ß√£o
async function realizarAutoTraducao() {
    try {
        console.log(`\n${icons.init} Iniciando tradu√ß√£o autom√°tica...`);
        console.log(`${icons.time} In√≠cio: ${new Date().toLocaleTimeString()}`);

        // Verificar se o arquivo pt.json existe
        if (!fs.existsSync(PT_JSON_PATH)) {
            console.error(`${icons.error} Arquivo pt.json n√£o encontrado. Execute primeiro a extra√ß√£o de tradu√ß√µes.`);
            return false;
        }

        // Carregar o arquivo pt.json
        console.log(`${icons.pt} Carregando arquivo de origem pt.json...`);
        const ptJson = fs.readJsonSync(PT_JSON_PATH);
        console.log(`${icons.dictionary} Dicion√°rio portugu√™s carregado com ${contarChaves(ptJson)} entradas totais`);

        // Carregar arquivos existentes (para preservar tradu√ß√µes j√° existentes)
        let enJson = {};
        let esJson = {};

        if (fs.existsSync(EN_JSON_PATH)) {
            console.log(`${icons.en} Carregando arquivo en.json existente...`);
            enJson = fs.readJsonSync(EN_JSON_PATH);
            console.log(`${icons.dictionary} Dicion√°rio ingl√™s existente tem ${contarChaves(enJson)} entradas`);
        }

        if (fs.existsSync(ES_JSON_PATH)) {
            console.log(`${icons.es} Carregando arquivo es.json existente...`);
            esJson = fs.readJsonSync(ES_JSON_PATH);
            console.log(`${icons.dictionary} Dicion√°rio espanhol existente tem ${contarChaves(esJson)} entradas`);
        }

        // Traduzir para ingl√™s
        console.log(`${icons.translate} Traduzindo para ingl√™s...`);
        const enJsonNovo = traduzirObjetoJson(ptJson, dicionarioPtEn);
        console.log(`${icons.success} Tradu√ß√£o para ingl√™s conclu√≠da`);

        // Traduzir para espanhol
        console.log(`${icons.translate} Traduzindo para espanhol...`);
        const esJsonNovo = traduzirObjetoJson(ptJson, dicionarioPtEs);
        console.log(`${icons.success} Tradu√ß√£o para espanhol conclu√≠da`);

        // Mesclar com arquivos existentes (mantendo tradu√ß√µes j√° existentes)
        console.log(`${icons.merge} Mesclando com tradu√ß√µes existentes em ingl√™s...`);
        const enJsonFinal = mesclarJsons(enJson, enJsonNovo);

        console.log(`${icons.merge} Mesclando com tradu√ß√µes existentes em espanhol...`);
        const esJsonFinal = mesclarJsons(esJson, esJsonNovo);

        // Salvar os arquivos
        await fs.writeJson(EN_JSON_PATH, enJsonFinal, { spaces: 2 });
        console.log(`${icons.save} Arquivo ${path.relative(ROOT_DIR, EN_JSON_PATH)} atualizado com ${contarChaves(enJsonFinal)} entradas.`);

        await fs.writeJson(ES_JSON_PATH, esJsonFinal, { spaces: 2 });
        console.log(`${icons.save} Arquivo ${path.relative(ROOT_DIR, ES_JSON_PATH)} atualizado com ${contarChaves(esJsonFinal)} entradas.`);

        console.log(`${icons.success} Tradu√ß√£o autom√°tica conclu√≠da com sucesso!`);
        console.log(`${icons.time} Fim: ${new Date().toLocaleTimeString()}`);

        return true;
    } catch (error) {
        console.error(`${icons.error} Erro durante a tradu√ß√£o autom√°tica:`, error);
        return false;
    }
}

// Executar a fun√ß√£o se este arquivo for chamado diretamente (n√£o importado como m√≥dulo)
if (require.main === module) {
    console.log(`${icons.init} Executando auto-tradu√ß√£o como script independente`);

    realizarAutoTraducao()
        .then(result => {
            if (result) {
                process.exit(0);
            } else {
                process.exit(1);
            }
        })
        .catch(err => {
            console.error(`${icons.error} Erro inesperado:`, err);
            process.exit(1);
        });
}

// Exportar a fun√ß√£o como m√≥dulo
module.exports = realizarAutoTraducao;
